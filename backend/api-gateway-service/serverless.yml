service: api-gateway-service

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}

functions:
  # Service Discovery Handler
  serviceDiscovery:
    handler: src/handlers/discovery.getServices
    events:
      - http:
          path: /services
          method: get
          cors: true

  # Health Check Handler
  healthCheck:
    handler: src/handlers/health.checkHealth
    events:
      - http:
          path: /health
          method: get
          cors: true

  # Email Service Lambda Proxy
  emailProxy:
    handler: src/handlers/emailProxy.handler

resources:
  Resources:
    # Main API Gateway
    MainApiGateway:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: manpower-api-${self:provider.stage}
        Description: Main API Gateway for Manpower Platform
        EndpointConfiguration:
          Types:
            - REGIONAL

    # # Cognito Authorizer
    # CognitoAuthorizer:
    #   Type: AWS::ApiGateway::Authorizer
    #   Properties:
    #     Name: CognitoAuthorizer-${self:provider.stage}
    #     Type: COGNITO_USER_POOLS
    #     ProviderARNs:
    #       - arn:aws:cognito-idp:${self:provider.region}:041238861016:userpool/us-east-1_kQKPPUqRO
    #     RestApiId:
    #       Ref: MainApiGateway
    #     IdentitySource: method.request.header.Authorization

    # Auth Service Proxy Resource
    AuthResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ParentId:
          Fn::GetAtt: [MainApiGateway, RootResourceId]
        PathPart: auth

    AuthProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ParentId:
          Ref: AuthResource
        PathPart: "{proxy+}"

    AuthProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ResourceId:
          Ref: AuthProxyResource
        HttpMethod: ANY
        AuthorizationType: NONE
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: ANY
          Uri: https://j5ewdxkzwh.execute-api.us-east-1.amazonaws.com/dev/{proxy}
          IntegrationResponses:
            - StatusCode: 200
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true

    # Files Service Proxy Resource
    FilesResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ParentId:
          Fn::GetAtt: [MainApiGateway, RootResourceId]
        PathPart: files

    FilesProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ParentId:
          Ref: FilesResource
        PathPart: "{proxy+}"

    FilesProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ResourceId:
          Ref: FilesProxyResource
        HttpMethod: ANY
        AuthorizationType: NONE
        # AuthorizerId:
        #   Ref: CognitoAuthorizer
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: ANY
          Uri: https://58pmvhvqo2.execute-api.us-east-1.amazonaws.com/dev/{proxy}
          IntegrationResponses:
            - StatusCode: 200
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true

    # Folders Service Proxy Resource
    FoldersResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ParentId:
          Fn::GetAtt: [MainApiGateway, RootResourceId]
        PathPart: folders

    FoldersProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ParentId:
          Ref: FoldersResource
        PathPart: "{proxy+}"

    FoldersProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ResourceId:
          Ref: FoldersProxyResource
        HttpMethod: ANY
        AuthorizationType: NONE
        # AuthorizerId:
        #   Ref: CognitoAuthorizer
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: ANY
          Uri: https://83upriwf35.execute-api.us-east-1.amazonaws.com/dev/{proxy}
          IntegrationResponses:
            - StatusCode: 200
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true

    # Jobs Service Proxy Resource
    JobsResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ParentId:
          Fn::GetAtt: [MainApiGateway, RootResourceId]
        PathPart: jobs

    JobsProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ParentId:
          Ref: JobsResource
        PathPart: "{proxy+}"

    JobsProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ResourceId:
          Ref: JobsProxyResource
        HttpMethod: ANY
        AuthorizationType: NONE
        # AuthorizerId:
        #   Ref: CognitoAuthorizer
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: ANY
          Uri: https://pa3itplx4f.execute-api.us-east-1.amazonaws.com/dev/{proxy}
          IntegrationResponses:
            - StatusCode: 200
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true

    # OCR Service Proxy Resource
    OCRResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ParentId:
          Fn::GetAtt: [MainApiGateway, RootResourceId]
        PathPart: ocr

    OCRProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ParentId:
          Ref: OCRResource
        PathPart: "{proxy+}"

    OCRProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ResourceId:
          Ref: OCRProxyResource
        HttpMethod: ANY
        AuthorizationType: NONE
        # AuthorizerId:
        #   Ref: CognitoAuthorizer
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: ANY
          Uri: https://xtspcl5cj6.execute-api.us-east-1.amazonaws.com/dev/{proxy}
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Access-Control-Allow-Origin: "'*'"
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true

    # WhatsApp Service Proxy Resource
    WhatsAppResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ParentId:
          Fn::GetAtt: [MainApiGateway, RootResourceId]
        PathPart: whatsapp

    WhatsAppProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ParentId:
          Ref: WhatsAppResource
        PathPart: "{proxy+}"

    WhatsAppProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ResourceId:
          Ref: WhatsAppProxyResource
        HttpMethod: ANY
        AuthorizationType: NONE
        # AuthorizerId:
        #   Ref: CognitoAuthorizer
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: ANY
          Uri: https://whatsapp-service-url.execute-api.us-east-1.amazonaws.com/dev/{proxy}
          IntegrationResponses:
            - StatusCode: 200
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true

    # Email Service Lambda Proxy Resources
    EmailResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ParentId:
          Fn::GetAtt: [MainApiGateway, RootResourceId]
        PathPart: email

    EmailProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ParentId:
          Ref: EmailResource
        PathPart: "{proxy+}"

    EmailProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MainApiGateway
        ResourceId:
          Ref: EmailProxyResource
        HttpMethod: ANY
        AuthorizationType: NONE
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EmailProxyLambdaFunction.Arn}/invocations

    EmailProxyLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Ref: EmailProxyLambdaFunction
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MainApiGateway}/*/*

    # Deployment
    ApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      DependsOn:
        - AuthProxyMethod
        - FilesProxyMethod
        - FoldersProxyMethod
        - JobsProxyMethod
        - OCRProxyMethod
        - WhatsAppProxyMethod
        - EmailProxyMethod
      Properties:
        RestApiId:
          Ref: MainApiGateway
        StageName: ${self:provider.stage}

  Outputs:
    MainApiGatewayUrl:
      Description: Main API Gateway URL
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: MainApiGateway
            - ".execute-api."
            - ${self:provider.region}
            - ".amazonaws.com/"
            - ${self:provider.stage}
      Export:
        Name: MainApiGatewayUrl-${self:provider.stage}

    ApiGatewayId:
      Description: Main API Gateway ID
      Value:
        Ref: MainApiGateway
      Export:
        Name: MainApiGatewayId-${self:provider.stage}

plugins:
  - serverless-plugin-typescript