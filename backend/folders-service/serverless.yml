service: folders-service

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    FOLDERS_TABLE: manpower-folders-${self:provider.stage}
    AUTH_SERVICE_URL: ${env:AUTH_SERVICE_URL, 'https://7pptifb3zk.execute-api.us-east-1.amazonaws.com/dev'}
    INTERNAL_API_KEY: ${env:INTERNAL_API_KEY, 'default-internal-key'}
    DYNAMODB_ENDPOINT: ${env:DYNAMODB_ENDPOINT, ''}
    JOBS_SERVICE_URL: ${env:JOBS_SERVICE_URL, 'https://pa3itplx4f.execute-api.us-east-1.amazonaws.com/dev'}
    FILES_SERVICE_URL: ${env:FILES_SERVICE_URL, 'https://58pmvhvqo2.execute-api.us-east-1.amazonaws.com/dev'}
    WEBSOCKET_ENDPOINT: ${env:WEBSOCKET_ENDPOINT, ''}
    WEBSOCKET_SERVICE_URL: ${env:WEBSOCKET_SERVICE_URL, 'https://ni9nq1nd38.execute-api.us-east-1.amazonaws.com/dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
        - dynamodb:CreateTable
        - dynamodb:DescribeTable
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/manpower-folders-${self:provider.stage}
        - arn:aws:dynamodb:${self:provider.region}:*:table/manpower-folders-${self:provider.stage}/index/*
        - arn:aws:dynamodb:${self:provider.region}:*:table/manpower-folders-${self:provider.stage}/stream/*
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource:
        - arn:aws:execute-api:${self:provider.region}:*:*

functions:
  # Health Check
  healthCheck:
    handler: src/handlers/health.checkHealth
    events:
      - http:
          path: /health
          method: get
          cors: true

  # Create folder - ADMIN ONLY
  createFolder:
    handler: src/handlers/folders.createFolder
    events:
      - http:
          path: /folders
          method: post
          cors: true
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: CognitoAuthorizer

  # Internal folder creation - for inter-service communication
  createFolderInternal:
    handler: src/handlers/folders.createFolderInternal
    events:
      - http:
          path: /folders/internal
          method: post
          cors: true

  # Get all folders
  getAllFolders:
    handler: src/handlers/folders.getAllFolders
    events:
      - http:
          path: /folders
          method: get
          cors: true
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: CognitoAuthorizer

  # Get single folder
  getFolder:
    handler: src/handlers/folders.getFolder
    events:
      - http:
          path: /folders/{folderId}
          method: get
          cors: true
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: CognitoAuthorizer

  # Get folder children
  getFolderChildren:
    handler: src/handlers/folders.getFolderChildren
    events:
      - http:
          path: /folders/{folderId}/children
          method: get
          cors: true
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: CognitoAuthorizer

  # Get root folders
  getRootFolders:
    handler: src/handlers/folders.getRootFolders
    events:
      - http:
          path: /folders/root
          method: get
          cors: true
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: CognitoAuthorizer

  # Update folder - ADMIN ONLY
  updateFolder:
    handler: src/handlers/folders.updateFolder
    events:
      - http:
          path: /folders/{folderId}
          method: put
          cors: true
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: CognitoAuthorizer

  # Delete folder - ADMIN ONLY
  deleteFolder:
    handler: src/handlers/folders.deleteFolder
    events:
      - http:
          path: /folders/{folderId}
          method: delete
          cors: true
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: CognitoAuthorizer

  # Delete multiple folders - ADMIN ONLY
  deleteFolders:
    handler: src/handlers/folders.deleteFolders
    events:
      - http:
          path: /folders/batch
          method: delete
          cors: true
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: CognitoAuthorizer

  # DynamoDB Stream Handler - Real-time folder changes
  foldersStreamHandler:
    handler: src/handlers/streamHandler.handleFoldersStream
    description: Processes DynamoDB stream events for real-time folder updates
    events:
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:us-east-1:041238861016:table/manpower-folders-dev/stream/2025-09-26T16:43:21.355
          batchSize: 10
          startingPosition: LATEST
          enabled: true

resources:
  Resources:
    # # Cognito Authorizer (references auth-service User Pool)
    # CognitoAuthorizer:
    #   Type: AWS::ApiGateway::Authorizer
    #   Properties:
    #     Name: FoldersCognitoAuthorizer
    #     Type: COGNITO_USER_POOLS
    #     ProviderARNs:
    #       - arn:aws:cognito-idp:${self:provider.region}:#{AWS::AccountId}:userpool/us-east-1_kQKPPUqRO
    #     RestApiId:
    #       Ref: RestApi
    #     IdentitySource: method.request.header.Authorization

    # DynamoDB Table with Stream enabled for real-time updates
    # Using existing table - commented out to avoid conflicts
    # FoldersTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: manpower-folders-${self:provider.stage}
    #     BillingMode: PAY_PER_REQUEST
    #     AttributeDefinitions:
    #       - AttributeName: folderId
    #         AttributeType: S
    #       - AttributeName: userId
    #         AttributeType: S
    #       - AttributeName: parentId
    #         AttributeType: S
    #       - AttributeName: createdAt
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: folderId
    #         KeyType: HASH
    #       - AttributeName: userId
    #         KeyType: RANGE
    #     # Enable DynamoDB Streams for real-time updates
    #     StreamSpecification:
    #       StreamViewType: NEW_AND_OLD_IMAGES
    #     GlobalSecondaryIndexes:
    #       - IndexName: UserIndex
    #         KeySchema:
    #           - AttributeName: userId
    #             KeyType: HASH
    #           - AttributeName: createdAt
    #             KeyType: RANGE
    #         Projection:
    #           ProjectionType: ALL
    #       - IndexName: ParentIndex
    #         KeySchema:
    #           - AttributeName: parentId
    #             KeyType: HASH
    #           - AttributeName: createdAt
    #             KeyType: RANGE
    #         Projection:
    #           ProjectionType: ALL

  # Outputs:
    # FoldersServiceUrl:
    #   Description: Folders Service API Gateway URL
    #   Value:
    #     Fn::Join:
    #       - ""
    #       - - "https://"
    #         - Ref: RestApi
    #         - ".execute-api."
    #         - ${self:provider.region}
    #         - ".amazonaws.com/"
    #         - ${self:provider.stage}
    #   Export:
    #     Name: FoldersServiceUrl-${self:provider.stage}

    # FoldersServiceApiId:
    #   Description: Folders Service API Gateway ID
    #   Value:
    #     Ref: RestApi
    #   Export:
    #     Name: FoldersServiceApiId-${self:provider.stage}


  # Outputs:
    # FoldersTableStreamArn:
    #   Description: DynamoDB Stream ARN for real-time updates
    #   Value:
    #     Fn::GetAtt: [FoldersTable, StreamArn]
    #   Export:
    #     Name: FoldersTableStreamArn-${self:provider.stage}

    # FoldersTableName:
    #   Description: DynamoDB Table Name
    #   Value:
    #     Ref: FoldersTable
    #   Export:
    #     Name: FoldersTableName-${self:provider.stage}

plugins:
  - serverless-plugin-typescript
  - serverless-offline