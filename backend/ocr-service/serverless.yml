service: ocr-service

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    HOKTUS_ORCHESTRATOR_URL: https://hoktus-orchestrator-5504.com
    CALLBACK_BASE_URL: ${self:custom.callbackBaseUrl.${self:provider.stage}}
    WEBSOCKET_ENDPOINT: ${self:custom.websocketEndpoint.${self:provider.stage}}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/ocr-documents-${self:provider.stage}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/ocr-documents-${self:provider.stage}/index/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/websocket-connections-${self:provider.stage}"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:GetObjectVersion
          Resource:
            - "arn:aws:s3:::manpower-files-dev/*"
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
            - execute-api:Invoke
          Resource:
            - "arn:aws:execute-api:${self:provider.region}:*:*/*"
            - "arn:aws:execute-api:${self:provider.region}:*:*/*/*"

custom:
  callbackBaseUrl:
    dev: https://xtspcl5cj6.execute-api.us-east-1.amazonaws.com/dev
    staging: https://staging-api.manpower-platform.com
    prod: https://api.manpower-platform.com
  websocketEndpoint:
    dev: https://axt7p628rd.execute-api.us-east-1.amazonaws.com/dev
    staging: https://staging-websocket.manpower-platform.com
    prod: https://websocket.manpower-platform.com

plugins:
  - serverless-plugin-typescript


functions:
  processDocuments:
    handler: src/handlers/ocr.processDocuments
    events:
      - http:
          path: /api/ocr/process-documents
          method: post
          cors: true
    environment:
      FUNCTION_NAME: processDocuments

  processDocumentsFromAdmin:
    handler: src/handlers/ocr.processDocumentsFromAdmin
    events:
      - http:
          path: /api/ocr/process-documents-admin
          method: post
          cors: true
    environment:
      FUNCTION_NAME: processDocumentsFromAdmin

  callback:
    handler: src/handlers/ocr.callback
    events:
      - http:
          path: /api/ocr/callback
          method: post
          cors: true
    environment:
      FUNCTION_NAME: callback

  health:
    handler: src/handlers/health.handler
    events:
      - http:
          path: /api/ocr/health
          method: get
          cors: true
    environment:
      FUNCTION_NAME: health


  getPublicFile:
    handler: src/handlers/ocr.getPublicFile
    events:
      - http:
          path: /api/ocr/public-file/{platformDocumentId}
          method: get
          cors: true
    environment:
      FUNCTION_NAME: getPublicFile

  # WebSocket authorizer
  websocketAuthorizer:
    handler: src/handlers/websocket-authorizer.authorizer
    environment:
      FUNCTION_NAME: websocketAuthorizer

  # WebSocket handlers
  websocketConnect:
    handler: src/handlers/websocket.connect
    events:
      - websocket:
          route: $connect
    environment:
      FUNCTION_NAME: websocketConnect
      WEBSOCKET_ENDPOINT: ${self:custom.websocketEndpoint.${self:provider.stage}}
    timeout: 30

  websocketDisconnect:
    handler: src/handlers/websocket.connect
    events:
      - websocket:
          route: $disconnect
    environment:
      FUNCTION_NAME: websocketDisconnect
      WEBSOCKET_ENDPOINT: ${self:custom.websocketEndpoint.${self:provider.stage}}
    timeout: 30

  websocketDefault:
    handler: src/handlers/websocket.connect
    events:
      - websocket:
          route: $default
    environment:
      FUNCTION_NAME: websocketDefault
      WEBSOCKET_ENDPOINT: ${self:custom.websocketEndpoint.${self:provider.stage}}
    timeout: 30

  notifyDocumentUpdate:
    handler: src/handlers/websocket.notifyDocumentUpdate
    events:
      - http:
          path: /api/ocr/notify-update
          method: post
          cors: true
    environment:
      FUNCTION_NAME: notifyDocumentUpdate
      WEBSOCKET_ENDPOINT: ${self:custom.websocketEndpoint.${self:provider.stage}}

  getDocumentStatus:
    handler: src/handlers/ocr.getDocumentStatus
    events:
      - http:
          path: /api/ocr/document/{documentId}
          method: get
          cors: true
    environment:
      FUNCTION_NAME: getDocumentStatus

  getDocumentsByStatus:
    handler: src/handlers/ocr.getDocumentsByStatus
    events:
      - http:
          path: /api/ocr/documents
          method: get
          cors: true
    environment:
      FUNCTION_NAME: getDocumentsByStatus

  deleteDocument:
    handler: src/handlers/ocr.deleteDocument
    events:
      - http:
          path: /api/ocr/delete/{id}
          method: delete
          cors:
            origin: '*'
            headers: 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
            allowCredentials: false
      - http:
          path: /api/ocr/delete/{id}
          method: options
          cors:
            origin: '*'
            headers: 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
            allowCredentials: false
    environment:
      FUNCTION_NAME: deleteDocument

  cleanupTestDocuments:
    handler: src/handlers/ocr.cleanupTestDocuments
    events:
      - http:
          path: /api/ocr/cleanup-test-documents
          method: post
          cors: true
    environment:
      FUNCTION_NAME: cleanupTestDocuments

resources:
  Resources:
    OCRDocumentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ocr-documents-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: status-createdAt-index
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    WebSocketConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: websocket-connections-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true


