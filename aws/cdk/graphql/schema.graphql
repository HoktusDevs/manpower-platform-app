# Manpower Platform GraphQL Schema
# AWS AppSync Direct DynamoDB Access

# TYPES
type Application {
  userId: String!
  applicationId: String!
  companyName: String!
  position: String!
  status: ApplicationStatus!
  description: String
  salary: String
  location: String
  createdAt: String!
  updatedAt: String!
  companyId: String
}

type Document {
  userId: String!
  documentId: String!
  fileName: String!
  documentType: DocumentType!
  s3Key: String!
  uploadedAt: String!
  fileSize: Int
  mimeType: String
}

# ENUMS
enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  IN_REVIEW
  INTERVIEW_SCHEDULED
  HIRED
}

enum DocumentType {
  RESUME
  COVER_LETTER
  PORTFOLIO
  CERTIFICATE
  ID_DOCUMENT
  OTHER
}

# INPUT TYPES
input CreateApplicationInput {
  companyName: String!
  position: String!
  description: String
  salary: String
  location: String
  companyId: String
}

input UpdateApplicationInput {
  applicationId: String!
  status: ApplicationStatus
  description: String
  salary: String
  location: String
}

input UploadDocumentInput {
  fileName: String!
  documentType: DocumentType!
  fileSize: Int
  mimeType: String
}

# QUERIES
type Query {
  # POSTULANTE: Get my applications only
  getMyApplications: [Application!]!
  
  # POSTULANTE: Get specific application (only mine)
  getMyApplication(applicationId: String!): Application
  
  # POSTULANTE: Get my documents
  getMyDocuments: [Document!]!
  
  # ADMIN ONLY: Get all applications
  getAllApplications(status: ApplicationStatus, limit: Int, nextToken: String): [Application!]!
  
  # ADMIN ONLY: Get applications by company
  getApplicationsByCompany(companyId: String!): [Application!]!
  
  # ADMIN ONLY: Get application statistics
  getApplicationStats: ApplicationStats
  
  # JOB POSTINGS QUERIES
  # PUBLIC: Get active job postings (published, not expired)
  getActiveJobPostings(limit: Int, nextToken: String): [JobPosting!]!
  
  # PUBLIC: Get specific job posting
  getJobPosting(jobId: String!): JobPosting
  
  # ADMIN ONLY: Get all job postings
  getAllJobPostings(status: JobStatus, limit: Int, nextToken: String): [JobPosting!]!
  
  # ADMIN ONLY: Get job posting statistics
  getJobPostingStats: JobPostingStats
}

# MUTATIONS  
type Mutation {
  # POSTULANTE: Create new application
  createApplication(input: CreateApplicationInput!): Application!
  
  # POSTULANTE: Update my application (limited fields)
  updateMyApplication(input: UpdateApplicationInput!): Application!
  
  # POSTULANTE: Delete my application
  deleteMyApplication(applicationId: String!): Boolean!
  
  # POSTULANTE: Upload document
  uploadDocument(input: UploadDocumentInput!): Document!
  
  # ADMIN ONLY: Update any application
  updateApplicationStatus(applicationId: String!, userId: String!, status: ApplicationStatus!): Application!
  
  # ADMIN ONLY: Delete any application  
  deleteApplication(applicationId: String!, userId: String!): Boolean!
  
  # JOB POSTINGS MUTATIONS
  # ADMIN ONLY: Create job posting
  createJobPosting(input: CreateJobPostingInput!): JobPosting!
  
  # ADMIN ONLY: Update job posting
  updateJobPosting(input: UpdateJobPostingInput!): JobPosting!
  
  # ADMIN ONLY: Delete job posting
  deleteJobPosting(jobId: String!): Boolean!
  
  # ADMIN ONLY: Publish job posting
  publishJobPosting(jobId: String!): JobPosting!
  
  # ADMIN ONLY: Pause job posting
  pauseJobPosting(jobId: String!): JobPosting!
}

# SUBSCRIPTIONS (Real-time updates)
type Subscription {
  # POSTULANTE: Subscribe to my application updates
  onMyApplicationUpdated(userId: String!): Application
    @aws_subscribe(mutations: ["updateApplicationStatus", "updateMyApplication"])
  
  # ADMIN ONLY: Subscribe to all application updates
  onApplicationCreated: Application  
    @aws_subscribe(mutations: ["createApplication"])
    
  # ADMIN ONLY: Subscribe to status changes
  onApplicationStatusChanged: Application
    @aws_subscribe(mutations: ["updateApplicationStatus"])
}

# ADMIN ONLY TYPES
type ApplicationStats {
  totalApplications: Int!
  pendingCount: Int!
  approvedCount: Int!
  rejectedCount: Int!
  inReviewCount: Int!
  averageProcessingTime: Float
  topCompanies: [CompanyStats!]!
}

type CompanyStats {
  companyId: String!
  companyName: String!
  applicationCount: Int!
  approvedCount: Int!
  rejectedCount: Int!
}

# JOB POSTINGS TYPES
type JobPosting {
  jobId: String!
  title: String!
  description: String!
  requirements: String!
  salary: String
  location: String!
  employmentType: EmploymentType!
  status: JobStatus!
  companyName: String!
  companyId: String
  benefits: String
  experienceLevel: ExperienceLevel!
  createdAt: String!
  updatedAt: String!
  expiresAt: String
  applicationCount: Int
}

# JOB POSTINGS ENUMS
enum JobStatus {
  DRAFT
  PUBLISHED
  PAUSED
  EXPIRED
  CLOSED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
  TEMPORARY
}

enum ExperienceLevel {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
  EXECUTIVE
  INTERNSHIP
}

# JOB POSTINGS INPUT TYPES
input CreateJobPostingInput {
  title: String!
  description: String!
  requirements: String!
  salary: String
  location: String!
  employmentType: EmploymentType!
  companyName: String!
  companyId: String
  benefits: String
  experienceLevel: ExperienceLevel!
  expiresAt: String
}

input UpdateJobPostingInput {
  jobId: String!
  title: String
  description: String
  requirements: String
  salary: String
  location: String
  employmentType: EmploymentType
  companyName: String
  companyId: String
  benefits: String
  experienceLevel: ExperienceLevel
  status: JobStatus
  expiresAt: String
}

# JOB POSTING STATISTICS
type JobPostingStats {
  totalJobPostings: Int!
  publishedCount: Int!
  draftCount: Int!
  pausedCount: Int!
  expiredCount: Int!
  closedCount: Int!
  averageApplicationsPerJob: Float
  topEmploymentTypes: [EmploymentTypeStats!]!
  topExperienceLevels: [ExperienceLevelStats!]!
}

type EmploymentTypeStats {
  employmentType: EmploymentType!
  count: Int!
  applicationCount: Int!
}

type ExperienceLevelStats {
  experienceLevel: ExperienceLevel!
  count: Int!
  applicationCount: Int!
}

# DIRECTIVES
directive @aws_auth(cognito_groups: [String!]) on FIELD_DEFINITION
directive @aws_subscribe(mutations: [String!]) on FIELD_DEFINITION